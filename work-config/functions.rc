#----Functions-------------------
pyenv-venv() {
  pyenv virtualenv "$1.$(get_latest_version $1)" $2
}

pyenv-brew-relink() {
  rm -f "$HOME/.pyenv/versions/*-brew"

  for i in /usr/local/Cellar/python*/*; do
    ln -s $i $HOME/.pyenv/versions/${i##/*/}-brew
  done
}

get_latest_version() {
  echo $(pyenv install -l | grep -Eo "$1.*" | cut -d . -f 3 | sort -nr | head -1)
}

openrc() {
  readonly filename=${1:?"Which rc file would you like to open?"}
  rc_file=${filename}'.rc'
  code-insiders ~/Bootstrap-Environment/work-config/${rc_file}
}

squash() {
  readonly commits=${1:?"How many commits back would you like to squash?"}
  git rebase -i HEAD~$commits
}

squashmerge() {
  readonly target_branch_name=${1:?"Which branch would like to merge?"}
  git merge --squash $target_branch_name
}

getdbcreds() {
  readonly env=${1:-stage}
  local creds_object=$(vault read database/mysql/$env/customcheckout/creds/mysql_read -format=json)
  local un=$(echo $creds_object | jq -r .data.username)
  local pw=$(echo $creds_object | jq -r .data.password)
  echo "Username: $un"
  echo "Password: $pw"
  echo -n "$un $pw" | pbcopy
}

getdbusername() {
  readonly env=${1:-stage}
  local creds_object=$(vault read database/mysql/$env/customcheckout/creds/mysql_read -format=json)
  local un=$(echo $creds_object | jq -r .data.username)
  echo $un
}

getdbpassword() {
  readonly env=${1:-stage}
  local creds_object=$(vault read database/mysql/$env/customcheckout/creds/mysql_read -format=json)
  local pw=$(echo $creds_object | jq -r .data.password)
  echo $pw
}

installkube() {
  brew install kubectl
  (
    set -x
    cd "$(mktemp -d)" &&
      OS="$(uname | tr '[:upper:]' '[:lower:]')" &&
      ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" &&
      KREW="krew-${OS}_${ARCH}" &&
      curl -fsSLO "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" &&
      tar zxvf "${KREW}.tar.gz" &&
      ./"${KREW}" install krew
  )
  kubectl krew install ctx
  kubectl krew install ns
}

getsecret() {
  USAGE="getsecret [-n] secret_name
    -n: Get secret from your namespace instead of composer-user-workloads"

  local namespace="--namespace=composer-user-workloads"
  while getopts ':nh' arg; do
    case $arg in
    n)
      namespace="--namespace=$USER"
      ;;
    h | *)
      echo $USAGE
      return
      ;;
    esac
  done
  shift $((OPTIND - 1))

  local readonly secret_name=$1
  if [ -z "$secret_name" ]; then
    echo $USAGE
    return
  fi

  local secret_json=$(kubectl get secrets $secret_name $namespace -o json | jq .data)
  echo "What key (inside the secret) would you like to get?"
  select secret_key in $(echo "$secret_json" | jq -rc keys | tr -d '[]'); do
    echo "$secret_json" | jq -r ".$secret_key" | base64 --decode
    break
  done
}

gns() {
  if [ -z "$1" ]; then
    echo "gns <project>

Allows for easy gcloud config and k8s context switching.

  Projects:
    - test-cc  (Test Composer V2)
    - stage-cc (Stage Composer V2)
    - prod-cc  (Prod Composer V2.5.3)
    - old-prod-cc  (Prod Composer V2.2.5)
    - stage    (Recharge Stage)
    - infra    (Recharge Infra)
    - prod     (Recharge Prod)"
    return
  fi

  case $1 in
  test-cc | testing-cloudcomposer | tcc)
    GCP_PROJECT=recharge-stage-services-8e59
    CLUSTER=us-east4-data-engineering-c-d725ca85-gke
    REGION=us-east4
    KUBECTX=gke_recharge-stage-services-8e59_us-east4_us-east4-data-engineering-c-d725ca85-gke
    ;;
  stage-cc | staging-cloudcomposer | scc)
    GCP_PROJECT=recharge-stage-services-8e59
    CLUSTER=us-east4-data-engineering-c-78114104-gke
    REGION=us-east4
    KUBECTX=gke_recharge-stage-services-8e59_us-east4_us-east4-data-engineering-c-78114104-gke
    ;;
  prod-cc | prod-cloudcomposer | pcc)
    GCP_PROJECT=recharge-prod-services-f818
    CLUSTER=us-east4-data-engineering-c-79929a8f-gke
    REGION=us-east4
    KUBECTX=gke_recharge-prod-services-f818_us-east4_us-east4-data-engineering-c-79929a8f-gke
    ;;
  old-prod-cc | old-prod-cloudcomposer | old-pcc)
    GCP_PROJECT=recharge-prod-services-f818
    CLUSTER=us-east4-data-engineering-c-51fa0ed8-gke
    REGION=us-east4
    KUBECTX=gke_recharge-prod-services-f818_us-east4_us-east4-data-engineering-c-51fa0ed8-gke
    ;;
  stage | staging | s)
    GCP_PROJECT=recharge-stage-services-8e59
    CLUSTER=staging
    REGION=us-east4
    KUBECTX=gke_recharge-stage-services-8e59_us-east4_staging
    ;;
  infra | i)
    GCP_PROJECT=recharge-infra-services-8b42
    CLUSTER=infra
    REGION=us-east4
    KUBECTX=gke_recharge-infra-services-8b42_us-east4_infra
    ;;
  prod | p)
    GCP_PROJECT=recharge-prod-services-f818
    CLUSTER=prod
    REGION=us-east4
    KUBECTX=gke_recharge-prod-services-f818_us-east4_prod
    ;;
  esac

  gcloud config set project $GCP_PROJECT

  if [ -n "$CLUSTER" ]; then
    gcloud container clusters get-credentials $CLUSTER --region $REGION
  fi
}

donebeep() {
  for i in {1..$1}; do
    osascript -e beep
  done
}

countfiles() {
  readonly filetype=${1:?"Please provide a filetype"}
  find . -type f -name \*.$filetype | wc -l
}
