#----Functions-------------------
function countfiles() {
  readonly filetype=${1:?"Please provide a filetype"}
  find . -type f -name \*.$filetype | wc -l
}

function openrc() {
  readonly filename=${1:?"Which rc file would you like to open?"}
  rc_file=${filename}'.rc'
  code-insiders ~/Bootstrap-Environment/work-config/${rc_file}
}

function squash() {
  readonly commits=${1:?"How many commits back would you like to squash?"}
  git rebase -i HEAD~$commits
}

function squashmerge() {
  readonly target_branch_name=${1:?"Which branch would like to merge?"}
  git merge --squash $target_branch_name
}

function awspush() {
  aws s3 cp $1 s3://vuka-ingest-manager/$2
}

function awspull() {
  aws s3 cp s3://vuka-ingest-manager/$1 $2
}

function awsls() {
  aws s3 ls s3://vuka-ingest-manager/$1 --human-readable
}

function awssync() {
  aws s3 sync s3://vuka-ingest-manager/$1 $2
}

function removed_key() {
  readonly filename=${1:?"Which log file would you like to check?"}
  readonly key=${2:?"Which key would you like to check?"}
  if [[ "$filename" != *.log ]]; then
    echo "Must be a log file"
  fi
  jq .removed $filename | jq "select(.$key != null)"
}

#-----Parsing functions----------
function parses() {
  PYTHONPATH=~/data-ingest-pipeline-tools/code/normalization python ~/data-ingest-pipeline-tools/code/data_parsing/parse.py -s $(source_id) "$@"
}

function reparse() {
  # update_date=$(date -d "this thursday" +%F)
  original_json_cnt=$(ls ./orig/*.json | wc -l) >/dev/null 2>&1
  if [[ -s orig/original.json ]]; then
    orig=orig/original.json
  elif [[ $original_json_cnt == 1 ]]; then
    orig="$(ls orig/*.json)"
  else
    echo "$original_json_cnt original json files"
    orig=""
  fi
  new=$(source_id).json
  while getopts d:o:n: flag; do
    case "${flag}" in
    # d) update_date=${OPTARG} ;;
    o) orig=${OPTARG} ;;
    n) new=${OPTARG} ;;
    esac
  done
  echo "\nOld = $orig"
  echo "New = $new"
  # echo "Update Date = $update_date\n"
  if read -q "run?(Y/y) to run reparser with these args: "; then
    echo "\n"
    PYTHONPATH=~/data-ingest-pipeline-tools/code/normalization python ~/data-ingest-pipeline-tools/code/data_parsing/parser/reparser.py -o $orig -n $new
    #-d $update_date
  fi
}

function defaultupload() {
  local breach_id
  local env=prod
  local filename=$(source_id).json
  while getopts e: flag; do
    case "${flag}" in
    e) env=${OPTARG} ;;
    f) filename=${OPTARG} ;;
    o) original=${OPTARG} ;;
    i) breach_id=${OPTARG} ;;
    esac
  done
  if [[ ! $original ]]; then
    echo "Please select the original file:"
    select orig in $(ls); do
      local original=$orig
      break
    done
  fi
  while [[ ! $breach_id ]]; do
    echo "What is the breach ID: "
    read breach_id
  done
  if [[ $original == *".sql" ]]; then
    echo "Found sql file, ignoring linecount\n"
    local ignore_linecount="--ignore-linecount"
  fi
  echo "Environment: $env"
  echo "Parsed File: $filename"
  echo "Original File: $original"
  echo "Breach ID: $breach_id"
  if read -q "run?(Y/y) to run reparser with these args: "; then
    echo "\n"
    python ~/data-ingest-pipeline-tools/code/data_parsing/upload.py -e $env -f $filename -i $breach_id -o $original $ignore_linecount
  fi
}

#-----SQL Functions-----------
function striptable() {
  while getopts t:f: flag; do
    case "${flag}" in
    t) tablename=${OPTARG} ;;
    f) fp=${OPTARG} ;;
    esac
  done
  rg -U "(?s)CREATE TABLE \`${tablename}\` \(.*?\) ENGINE.*?;" $fp >"table-${tablename}.sql"
  rg -U "(?s)(INSERT INTO \`${tablename}\` VALUES \(.*?\);)+" $fp >>"table-${tablename}.sql"
}

function stripsql() {
  if [ -z $1 ]; then
    ls *.sql
    vared -p "Filename? " -c filename
  else
    filename=$1
  fi
  while (true); do
    # grep -Pazio 'CREATE TABLE `.*`' $filename
    # vared -p "Which table would you like to strip out? " -c table_name
    echo "Which table would you like to strip out? "
    select table_name in $(grep -Pazio 'CREATE TABLE \`.*\`' ${filename} | grep -Pazio '\`.*\`' | sed 's/\`//g'); do
      table_name_file=${table_name}'.txt'

      echo "Stripping header"
      grep -Pazio "CREATE TABLE \`${table_name}\` \((?:[?\n]\s+?.*)*\)" $filename >${table_name_file}
      sed "N;s/CREATE TABLE \`${table_name}\` (\n//g" ${table_name_file} | grep -Po "\n?\s{2}\`.*\`" | grep -o "\`.*\`" | sed 's/`//g' | sed ':a;N;$!ba;s/\n/,/g' >${table_name_file}

      echo "Stripping values"
      grep -Pazio "INSERT INTO \`${table_name}\` VALUES (.*?)\;" ${filename} >>${table_name_file}
      sed -i "s/INSERT INTO \`${table_name}\` VALUES (//g" ${table_name_file}

      wc -l ${table_name_file}
      sed 's/),(/\n/g' ${table_name_file} | wc -l
      sed -i 's/),(/\n/g' ${table_name_file}
      echo "Done"
      break
    done

    echo "Would you like to strip out another table (from the same file)?"
    select yn in "Yes" "No"; do
      case $yn in
      Yes)
        unset table_name
        break
        ;;
      No)
        return
        ;;
      esac
    done
  done
}
